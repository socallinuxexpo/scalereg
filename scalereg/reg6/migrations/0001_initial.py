# Generated by Django 5.2.2 on 2025-06-10 01:43

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
            ],
            options={
                'permissions': (('custom_view_answer', 'Can view answer'),),
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique, up to 4 upper-case letters / numbers', max_length=4)),
                ('description', models.CharField(max_length=60)),
                ('price', models.DecimalField(decimal_places=2, max_digits=5)),
                ('active', models.BooleanField(default=False)),
                ('pickup', models.BooleanField(default=False, help_text='Can we track if this item gets picked up?')),
                ('promo', models.BooleanField(default=False, help_text='Price affected by promo code?')),
                ('ticket_offset', models.BooleanField(default=False, help_text='Item offsets ticket price?')),
                ('applies_to_all', models.BooleanField(default=False, help_text='Applies to all tickets')),
            ],
            options={
                'permissions': (('custom_view_item', 'Can view item'),),
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
                ('active', models.BooleanField(default=False)),
                ('applies_to_all', models.BooleanField(default=False, help_text='Applies to all tickets')),
                ('applies_to_items', models.ManyToManyField(blank=True, to='reg6.item')),
            ],
            options={
                'permissions': (('custom_view_question', 'Can view question'),),
            },
        ),
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('name', models.CharField(help_text='Up to 5 letters, upper-case letters + numbers', max_length=5, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=60)),
                ('price_modifier', models.DecimalField(decimal_places=2, help_text='This is the price multiplier, i.e. for 0.4, $10 becomes $4.', max_digits=3)),
                ('active', models.BooleanField(default=False)),
                ('start_date', models.DateField(blank=True, help_text='Available on this day', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Not Usable on this day', null=True)),
                ('applies_to_all', models.BooleanField(default=False, help_text='Applies to all tickets')),
            ],
            options={
                'permissions': (('custom_view_promocode', 'Can view promo code'),),
            },
        ),
        migrations.CreateModel(
            name='ScannedBadge',
            fields=[
                ('number', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('size', models.CharField(max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('name', models.CharField(help_text='Up to 5 letters, upper-case letters + numbers', max_length=5, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=60)),
                ('type', models.CharField(choices=[('expo', 'Expo Only'), ('full', 'Full'), ('press', 'Press'), ('speaker', 'Speaker'), ('exhibitor', 'Exhibitor'), ('staff', 'Staff'), ('friday', 'Friday Only')], max_length=10)),
                ('price', models.DecimalField(decimal_places=2, max_digits=5)),
                ('priority', models.IntegerField(help_text='Ordering priority, lower numbers first')),
                ('public', models.BooleanField(default=False, help_text='Publicly available on the order page')),
                ('cash', models.BooleanField(default=False, help_text='Available for cash purchase')),
                ('upgradable', models.BooleanField(default=False, help_text='Eligible for upgrades')),
                ('limit', models.PositiveIntegerField(help_text='Maximum number of tickets, 0 for unlimited')),
                ('start_date', models.DateField(blank=True, help_text='Available on this day', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Not Usable on this day', null=True)),
            ],
            options={
                'permissions': (('custom_view_ticket', 'Can view ticket'),),
            },
        ),
        migrations.CreateModel(
            name='ListAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='reg6.answer')),
            ],
            bases=('reg6.answer',),
        ),
        migrations.CreateModel(
            name='TextAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='reg6.answer')),
            ],
            bases=('reg6.answer',),
        ),
        migrations.CreateModel(
            name='Attendee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valid', models.BooleanField(default=False)),
                ('checked_in', models.BooleanField(default=False, help_text='Only for valid attendees')),
                ('salutation', models.CharField(blank=True, choices=[('Mr', 'Mr.'), ('Ms', 'Ms.'), ('Mrs', 'Mrs.'), ('Dr', 'Dr.')], max_length=10)),
                ('first_name', models.CharField(max_length=60)),
                ('last_name', models.CharField(max_length=60)),
                ('title', models.CharField(blank=True, max_length=60)),
                ('org', models.CharField(blank=True, max_length=60)),
                ('email', models.EmailField(max_length=254)),
                ('zip', models.CharField(max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('obtained_items', models.CharField(blank=True, help_text='comma separated list of items', max_length=60)),
                ('can_email', models.BooleanField(default=False)),
                ('answers', models.ManyToManyField(blank=True, to='reg6.answer')),
                ('ordered_items', models.ManyToManyField(blank=True, to='reg6.item')),
            ],
            options={
                'permissions': (('custom_view_attendee', 'Can view attendee'),),
            },
        ),
        migrations.CreateModel(
            name='KioskAgent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agent', models.CharField(max_length=20)),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reg6.attendee')),
            ],
            options={
                'permissions': (('custom_view_kiosk_agent', 'Can view kiosk agent'),),
            },
        ),
        migrations.CreateModel(
            name='ListQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='reg6.question')),
            ],
            bases=('reg6.question',),
        ),
        migrations.CreateModel(
            name='TextQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='reg6.question')),
                ('max_length', models.IntegerField()),
            ],
            bases=('reg6.question',),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reg6.question'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_num', models.CharField(help_text='Unique 10 upper-case letters + numbers code', max_length=10, primary_key=True, serialize=False)),
                ('valid', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=120)),
                ('address', models.CharField(max_length=120)),
                ('city', models.CharField(max_length=60)),
                ('state', models.CharField(max_length=60)),
                ('zip', models.CharField(max_length=20)),
                ('country', models.CharField(blank=True, max_length=60)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=6)),
                ('payment_type', models.CharField(choices=[('verisign', 'Verisign'), ('google', 'Google Checkout'), ('cash', 'Cash'), ('invitee', 'Invitee'), ('exhibitor', 'Exhibitor'), ('speaker', 'Speaker'), ('press', 'Press'), ('freeup', 'Free Upgrade')], max_length=10)),
                ('auth_code', models.CharField(blank=True, help_text='Only used by Verisign', max_length=30)),
                ('pnref', models.CharField(blank=True, help_text='Payment Network Reference ID (PNREF), a number generated by PayPal that uniquely identifies the transaction', max_length=15)),
                ('resp_msg', models.CharField(blank=True, help_text='Only used by Verisign', max_length=60)),
                ('result', models.CharField(blank=True, help_text='Only used by Verisign', max_length=60)),
                ('already_paid_attendees', models.ManyToManyField(blank=True, help_text='Attendees charged multiple times on this order', related_name='already_paid', to='reg6.attendee')),
            ],
            options={
                'permissions': (('custom_view_order', 'Can view order'),),
            },
        ),
        migrations.AddField(
            model_name='attendee',
            name='order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='reg6.order'),
        ),
        migrations.AddField(
            model_name='attendee',
            name='promo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='reg6.promocode'),
        ),
        migrations.CreateModel(
            name='Reprint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reg6.attendee')),
            ],
            options={
                'permissions': (('custom_view_reprint', 'Can view reprint'),),
            },
        ),
        migrations.AddField(
            model_name='question',
            name='applies_to_tickets',
            field=models.ManyToManyField(blank=True, to='reg6.ticket'),
        ),
        migrations.AddField(
            model_name='promocode',
            name='applies_to',
            field=models.ManyToManyField(blank=True, to='reg6.ticket'),
        ),
        migrations.AddField(
            model_name='item',
            name='applies_to',
            field=models.ManyToManyField(blank=True, to='reg6.ticket'),
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('code', models.CharField(help_text='Unique 10 upper-case letters + numbers code', max_length=10, primary_key=True, serialize=False)),
                ('used', models.BooleanField(default=False)),
                ('max_attendees', models.PositiveSmallIntegerField()),
                ('expiration', models.DateField(blank=True, help_text='Not usable on this day', null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reg6.order')),
                ('badge_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reg6.ticket')),
            ],
            options={
                'permissions': (('custom_view_coupon', 'Can view coupon'),),
            },
        ),
        migrations.AddField(
            model_name='attendee',
            name='badge_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reg6.ticket'),
        ),
        migrations.CreateModel(
            name='Upgrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valid', models.BooleanField(default=False)),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reg6.attendee')),
                ('new_badge_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reg6.ticket')),
                ('new_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='reg6.order')),
                ('new_ordered_items', models.ManyToManyField(blank=True, to='reg6.item')),
                ('old_badge_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='old_badge_type', to='reg6.ticket')),
                ('old_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='old_order', to='reg6.order')),
                ('old_ordered_items', models.ManyToManyField(blank=True, related_name='old_ordered_items', to='reg6.item')),
            ],
            options={
                'permissions': (('custom_view_upgrade', 'Can view upgrade'),),
            },
        ),
        migrations.CreateModel(
            name='TempOrder',
            fields=[
                ('order_num', models.CharField(help_text='Unique 10 upper-case letters + numbers code', max_length=10, primary_key=True, serialize=False)),
                ('attendees', models.TextField(blank=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('upgrade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='reg6.upgrade')),
            ],
        ),
    ]
